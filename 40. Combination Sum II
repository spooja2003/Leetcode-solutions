class Solution {
public:
    void findCombi(int idx,vector<int>& candidates,vector<vector<int>>& ans,int target,vector<int>& currCombi){
        if(target==0){
            ans.push_back(currCombi);
        }
        for(int i = idx;i<candidates.size();i++){
            if(i>idx && candidates[i]==candidates[i-1]){
                continue;
            }
            if(candidates[i]>target){
                break; //since candidates is sorted , so forward ele will be > also.
            }
            currCombi.push_back(candidates[i]);
            findCombi(i+1,candidates,ans,target-candidates[i],currCombi);
            currCombi.pop_back();
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> ans;
        vector<int> currCombi;
        findCombi(0,candidates,ans,target,currCombi);
        return ans;
    }
};
